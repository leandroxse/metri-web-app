"use client"

import { useEffect, useState } from "react"
import { requestNotificationPermission, isNotificationSupported, getNotificationPermission } from "@/lib/utils/notifications"

/**
 * Componente que gerencia permiss√µes de notifica√ß√£o
 * Solicita permiss√£o automaticamente quando o PWA √© instalado/aberto
 */
export function NotificationManager() {
  const [hasAskedPermission, setHasAskedPermission] = useState(false)
  const [swReady, setSwReady] = useState(false)

  // Garantir que Service Worker est√° ativo e controlando a p√°gina
  useEffect(() => {
    if (typeof window === 'undefined' || !('serviceWorker' in navigator)) return

    const ensureServiceWorkerControl = async () => {
      try {
        // Esperar SW estar pronto
        const registration = await navigator.serviceWorker.ready
        console.log('üîß [SW] Service Worker registrado e pronto!')

        // Verificar se h√° controller
        if (!navigator.serviceWorker.controller) {
          console.log('‚ö†Ô∏è [SW] Sem controller - registrando novamente...')

          // Registrar SW se n√£o estiver registrado
          const reg = await navigator.serviceWorker.register('/sw.js')

          // Aguardar instala√ß√£o
          if (reg.installing) {
            console.log('üì• [SW] Instalando...')
            await new Promise((resolve) => {
              reg.installing!.addEventListener('statechange', (e) => {
                if ((e.target as ServiceWorker).state === 'activated') {
                  console.log('‚úÖ [SW] Ativado!')
                  resolve(true)
                }
              })
            })
          }

          // For√ßar reload para que o SW tome controle
          console.log('üîÑ [SW] Recarregando p√°gina para ativar controller...')
          window.location.reload()
          return
        }

        console.log('‚úÖ [SW] Controller ativo!')
        setSwReady(true)
      } catch (error) {
        console.error('‚ùå [SW] Erro ao garantir controle:', error)
      }
    }

    ensureServiceWorkerControl()
  }, [])

  useEffect(() => {
    // S√≥ executar no cliente
    if (typeof window === 'undefined') return

    // Aguardar SW estar pronto
    if (!swReady) return

    // Verificar se j√° pediu permiss√£o nesta sess√£o
    if (hasAskedPermission) return

    // Verificar se navegador suporta notifica√ß√µes
    if (!isNotificationSupported()) {
      console.log('Notifica√ß√µes n√£o suportadas neste navegador')
      return
    }

    // Verificar se est√° rodando como PWA (standalone mode)
    const isPWA = window.matchMedia('(display-mode: standalone)').matches ||
                  (window.navigator as any).standalone === true

    // Solicitar permiss√£o ap√≥s 2 segundos (melhor UX)
    const timer = setTimeout(async () => {
      const currentPermission = getNotificationPermission()

      // S√≥ pedir se ainda n√£o foi decidido
      if (currentPermission === 'default') {
        console.log('üì≤ Solicitando permiss√£o de notifica√ß√£o...')
        const granted = await requestNotificationPermission()

        if (granted) {
          console.log('‚úÖ Permiss√£o de notifica√ß√£o concedida!')
        } else {
          console.log('‚ùå Permiss√£o de notifica√ß√£o negada')
        }

        setHasAskedPermission(true)
      } else if (currentPermission === 'granted') {
        console.log('‚úÖ Permiss√£o de notifica√ß√£o j√° concedida')
        setHasAskedPermission(true)
      }
    }, 2000)

    return () => clearTimeout(timer)
  }, [hasAskedPermission, swReady])

  // Este componente n√£o renderiza nada visualmente
  return null
}
