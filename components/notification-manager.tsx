"use client"

import { useEffect, useState } from "react"
import { requestNotificationPermission, isNotificationSupported, getNotificationPermission } from "@/lib/utils/notifications"

/**
 * Componente que gerencia permiss√µes de notifica√ß√£o
 * Solicita permiss√£o automaticamente quando o PWA √© instalado/aberto
 */
export function NotificationManager() {
  const [hasAskedPermission, setHasAskedPermission] = useState(false)

  useEffect(() => {
    // S√≥ executar no cliente
    if (typeof window === 'undefined') return

    // Verificar se j√° pediu permiss√£o nesta sess√£o
    if (hasAskedPermission) return

    // Verificar se navegador suporta notifica√ß√µes
    if (!isNotificationSupported()) {
      console.log('Notifica√ß√µes n√£o suportadas neste navegador')
      return
    }

    // Verificar se est√° rodando como PWA (standalone mode)
    const isPWA = window.matchMedia('(display-mode: standalone)').matches ||
                  (window.navigator as any).standalone === true

    // Solicitar permiss√£o ap√≥s 2 segundos (melhor UX)
    const timer = setTimeout(async () => {
      const currentPermission = getNotificationPermission()

      // S√≥ pedir se ainda n√£o foi decidido
      if (currentPermission === 'default') {
        console.log('üì≤ Solicitando permiss√£o de notifica√ß√£o...')
        const granted = await requestNotificationPermission()

        if (granted) {
          console.log('‚úÖ Permiss√£o de notifica√ß√£o concedida!')
        } else {
          console.log('‚ùå Permiss√£o de notifica√ß√£o negada')
        }

        setHasAskedPermission(true)
      } else if (currentPermission === 'granted') {
        console.log('‚úÖ Permiss√£o de notifica√ß√£o j√° concedida')
        setHasAskedPermission(true)
      }
    }, 2000)

    return () => clearTimeout(timer)
  }, [hasAskedPermission])

  // Este componente n√£o renderiza nada visualmente
  return null
}
